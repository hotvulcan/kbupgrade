* We may want to make use of usbConfiguration (see usbdrv.h).

* USB_CFG_IMPLEMENT_HALT should be set to 1. What are the implications?

* The method for generating file names for the binary image file distributions
is too simple (but OK for now). We are using the AVR type to generate the name,
but there could be multiple circuit designs for one keyboard based on the same
MCU in the future. Hence, the circuit design name must be incorporated somehow.

* The boot loader is nice, but the procedure for flashing is a bit awkward:
plug in the keyboard, entering flash mode, THEN type bootloadHID... You'll need
another keyboard to do this. :(  Starting bootloadHID before replugging doesn't
work either since it cannot detect the device then. Thus, either extend
bootloadHID to wait for the device being connected, or write a small script
that puts a "sleep 5" in front of the call of bootloadHID.

* Function decode() works very well, but what if the EEPROM is programmed with
junk? This could really happen, especially after initial programming of
previously used controllers. We could (1) reject invalid data when being
programmed through USB, and leave decode() as it is; (2) enhance decode() so to
detect errors; (3) make decode() defensive so that it doesn't crash the whole
firmware when reading/writing wrong data.

Solutions (1) and (2) require additional, yet similar code. Solution (3) is
confusing for the user because errors get ignored and not reported back.

* It might be useful to allow the boot loader to exit by pressing some key
(maybe even the same that was used to enter to boot loader).

* It would be much nicer to detect avr-gcc as a real cross compiler rather than
hacking it into the Makefile.default file, and to have separate config.h files
for cross compiled and host compiled sources. There are no problems on my box
right now, but problems *will* show up sooner or later. I also suspect we could
run into trouble when the host compiler is not gcc (right now the cross
compiler and the host compiler are very similar, so the Makefile.default
hackery works sufficiently well). A cleaner solution is really needed.
